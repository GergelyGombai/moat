use std::mem::MaybeUninit;
use std::sync::Arc;
use std::str::FromStr;
use std::net::SocketAddr;

use anyhow::anyhow;
use anyhow::{Context, Result};
use clap::Parser;
use http_body_util::Full;
use hyper::Uri;
use hyper::body::Bytes;
use hyper_util::client::legacy::Client;
use hyper_util::rt::{TokioExecutor, TokioTimer};
use libbpf_rs::skel::{OpenSkel, SkelBuilder};
use nix::net::if_::if_nametoindex;
use tokio::net::TcpListener;

pub mod access_log;
pub mod access_rules;
pub mod actions;
pub mod config;
pub mod app_state;
pub mod cli;
pub mod content_scanning;
pub mod domain_filter;
pub mod firewall;
pub mod http;
pub mod utils;
pub mod wirefilter;
pub mod proxy_utils;
pub mod threat;
pub mod redis;
pub mod proxy_protocol;
pub mod authcheck;

pub mod bpf {
    // Include the skeleton generated by build.rs into OUT_DIR at compile time
    include!(concat!(env!("OUT_DIR"), "/filter.skel.rs"));
}

use tokio::signal;
use tokio::sync::watch;

use crate::app_state::AppState;
use crate::cli::{Args, Config};
use crate::domain_filter::DomainFilter;
use crate::http::{
    ProxyContext, SharedTlsState, TlsMode, install_ring_crypto_provider, load_custom_server_config,
    run_acme_http01_proxy, run_custom_tls_proxy, run_http_proxy,
};
use crate::http::health_checks::start_health_check_server;
use crate::wirefilter::init_config;
use crate::content_scanning::{init_content_scanner, ContentScanningConfig};
use crate::utils::bpf_utils;
use crate::actions::captcha::{CaptchaConfig, CaptchaProvider, init_captcha_client, start_cache_cleanup_task};
use crate::access_log::{LogSenderConfig, set_log_sender_config, start_batch_log_processor};
use crate::authcheck::validate_api_key;

#[tokio::main]
async fn main() -> Result<()> {
    install_ring_crypto_provider()?;

    let args = Args::parse();

    // Validate required arguments when no config file is provided
    if args.config.is_none() {
        if args.upstream.is_none() {
            return Err(anyhow::anyhow!("--upstream is required when no config file is provided"));
        }
        if args.arxignis_api_key.is_none() {
            return Err(anyhow::anyhow!("--arxignis-api-key is required when no config file is provided"));
        }
    }

    // Load configuration
    let config = Config::load_from_args(&args)
        .context("Failed to load configuration")?;

    // Initialize logger using CLI level
    {
        use env_logger::Env;
        let mut builder = env_logger::Builder::from_env(Env::default().default_filter_or("info"));
        builder.filter_level(args.log_level.to_level_filter());
        builder.format_timestamp_secs();
        builder.try_init().ok();
    }


    let iface_names: Vec<String> = if !config.network.ifaces.is_empty() {
        config.network.ifaces.clone()
    } else {
        vec![config.network.iface.clone()]
    };

    let mut skels: Vec<Arc<bpf::FilterSkel<'static>>> = Vec::new();
    let mut ifindices: Vec<i32> = Vec::new();

    if config.network.disable_xdp {
        log::info!("XDP disabled by config, skipping BPF attachment");
    } else {
        for iface in iface_names {
            let boxed_open: Box<MaybeUninit<libbpf_rs::OpenObject>> = Box::new(MaybeUninit::uninit());
            let open_object: &'static mut MaybeUninit<libbpf_rs::OpenObject> = Box::leak(boxed_open);
            let skel_builder = bpf::FilterSkelBuilder::default();
            match skel_builder.open(open_object).and_then(|o| o.load()) {
                Ok(mut skel) => {
                    let ifindex = match if_nametoindex(iface.as_str()) {
                        Ok(index) => index as i32,
                        Err(e) => {
                            log::error!("failed to get interface index for '{}': {e}", iface);
                            continue;
                        }
                    };
                    if let Err(e) = bpf_utils::bpf_attach_to_xdp(&mut skel, ifindex) {
                        log::error!("failed to attach XDP to '{}': {e}", iface);
                        continue;
                    }
                    log::info!("BPF sucessfully attached to xdp on {}", iface);
                    skels.push(Arc::new(skel));
                    ifindices.push(ifindex);
                }
                Err(e) => {
                    log::warn!("failed to load BPF skeleton for '{}': {e}", iface);
                }
            }
        }

        // Initialize access rules immediately after XDP attachment
        if !skels.is_empty() {
            let _ = access_rules::init_access_rules_from_global(&skels);
        }
    }

    // Convert config TLS mode string to enum
    let tls_mode = TlsMode::from_str(&config.tls.mode)
        .context("Invalid TLS mode in config")?;

    if tls_mode == TlsMode::Custom
        && (config.tls.cert_path.is_none() || config.tls.key_path.is_none())
    {
        return Err(anyhow!(
            "cert_path and key_path are required for custom TLS mode in config",
        ));
    }

    // Expand wildcard domains into specific domains for TLS and filtering
    let expanded_domains = DomainFilter::expand_wildcard_domains(&config.acme.domains);
    log::info!("Expanded {} domains into {} specific domains",
               config.acme.domains.len(), expanded_domains.len());

    let tls_state = SharedTlsState::new(
        tls_mode,
        expanded_domains.clone(),
        config.tls.cert_path.as_ref().map(|p| p.clone()),
    );

    let state = AppState {
        skels: skels.clone(),
        tls_state: tls_state.clone(),
        ifindices: ifindices.clone(),
    };


    let (shutdown_tx, shutdown_rx) = watch::channel(false);

    // Initialize Redis manager if Redis URL is provided
    if !config.redis.url.is_empty() {
        if let Err(e) = redis::RedisManager::init(&config.redis.url, config.redis.prefix.clone()).await {
            log::warn!("Failed to initialize Redis manager: {}", e);
        } else {
            log::info!("Redis manager initialized successfully");
        }
    }

    // Validate API key if provided
    if !config.arxignis.base_url.is_empty() && !config.arxignis.api_key.is_empty() {
        if let Err(e) = validate_api_key(
            &config.arxignis.base_url,
            &config.arxignis.api_key,
        ).await {
            log::error!("API key validation failed: {}", e);
            return Err(anyhow::anyhow!("API key validation failed: {}", e));
        }
    }

    // Build list of interfaces to attach
    if !config.arxignis.base_url.is_empty() && !config.arxignis.api_key.is_empty() {
        if let Err(e) = init_config(
            config.arxignis.base_url.clone(),
            config.arxignis.api_key.clone(),
        ).await {
            log::warn!("Failed to initialize HTTP filter with config: {}", e);
        }

        // Initialize threat intelligence client
        if let Err(e) = threat::init_threat_client(
            config.arxignis.base_url.clone(),
            config.arxignis.api_key.clone(),
        ).await {
            log::warn!("Failed to initialize threat client: {}", e);
        } else {
            log::info!("Threat intelligence client initialized");
            // Start cache cleanup task
            threat::start_cache_cleanup_task().await;
        }

        // Initialize captcha client if configuration is provided
        if let (Some(site_key), Some(secret_key), Some(jwt_secret)) = (
            &config.arxignis.captcha.site_key,
            &config.arxignis.captcha.secret_key,
            &config.arxignis.captcha.jwt_secret
        ) {
            let captcha_config = CaptchaConfig {
                site_key: site_key.clone(),
                secret_key: secret_key.clone(),
                jwt_secret: jwt_secret.clone(),
                provider: CaptchaProvider::from_str(&config.arxignis.captcha.provider).unwrap_or(CaptchaProvider::HCaptcha),
                token_ttl_seconds: config.arxignis.captcha.token_ttl,
                validation_cache_ttl_seconds: config.arxignis.captcha.cache_ttl,
            };

            if let Err(e) = init_captcha_client(
                captcha_config,
            ).await {
                log::warn!("Failed to initialize captcha client: {}", e);
            } else {
                log::info!("Captcha client initialized with provider: {}", config.arxignis.captcha.provider);
                // Start captcha cache cleanup task
                start_cache_cleanup_task().await;
            }
        } else {
            log::info!("Captcha client not initialized (missing site_key, secret_key, or jwt_secret)");
        }
    } else {
        log::warn!("No API credentials provided, HTTP filter will not be initialized");
    }

    // Initialize content scanning from CLI config
    let content_scanning_config = ContentScanningConfig {
        enabled: config.content_scanning.enabled,
        clamav_server: config.content_scanning.clamav_server.clone(),
        max_file_size: config.content_scanning.max_file_size,
        scan_content_types: config.content_scanning.scan_content_types.clone(),
        skip_extensions: config.content_scanning.skip_extensions.clone(),
        scan_expression: config.content_scanning.scan_expression.clone(),
    };
    if let Err(e) = init_content_scanner(content_scanning_config) {
        log::warn!("Failed to initialize content scanner: {}", e);
    } else {
        log::info!("Content scanner initialized successfully");
    }

    // Initialize access log sender configuration
    let log_sender_config = LogSenderConfig {
        enabled: config.arxignis.log_sending_enabled,
        base_url: config.arxignis.base_url.clone(),
        api_key: config.arxignis.api_key.clone(),
        batch_size_limit: 5000,        // Default: 5000 logs per batch
        batch_size_bytes: 5 * 1024 * 1024, // Default: 5MB
        batch_timeout_secs: 10,        // Default: 10 seconds
        include_response_body: config.arxignis.include_response_body,
        max_body_size: config.arxignis.max_body_size,
    };
    set_log_sender_config(log_sender_config);

    if config.arxignis.log_sending_enabled && !config.arxignis.api_key.is_empty() {
        log::info!("Access log sending to arxignis server enabled with batching (10s timeout, 5MB limit)");
        // Start the background batch log processor
        start_batch_log_processor();
    } else {
        log::info!("Access log sending to arxignis server disabled (enabled: {}, api_key configured: {})",
                   config.arxignis.log_sending_enabled, !config.arxignis.api_key.is_empty());
    }

    let upstream_uri = {
        let parsed = config.server.upstream
            .parse::<Uri>()
            .context("failed to parse upstream URI from config")?;
        if parsed.scheme().is_none() || parsed.authority().is_none() {
            return Err(anyhow!(
                "upstream URI must be absolute (e.g. http://127.0.0.1:8081)",
            ));
        }
        parsed
    };


    // Access rules were already initialized after XDP attachment above

    // Start periodic access rules updater (if BPF is available)
    let access_rules_handle = if !state.skels.is_empty() {
        let skels = state.skels.clone();
        let api_key = config.arxignis.api_key.clone();
        let base_url = config.arxignis.base_url.clone();
        let shutdown = shutdown_rx.clone();
        Some(access_rules::start_access_rules_updater(base_url, skels, api_key, shutdown))
    } else {
        log::info!("Skipping access rules updater (XDP disabled)");
        None
    };

    let tls_handle = {
        let mut builder = Client::builder(TokioExecutor::new());
        builder.timer(TokioTimer::new());
        builder.pool_timer(TokioTimer::new());
        let client: Client<_, Full<Bytes>> = builder.build_http();

        // Create domain filter from CLI arguments
        // Use expanded domains as the whitelist (serves dual purpose)
        let domain_filter = DomainFilter::new(
            expanded_domains.clone(),
            vec![],
        );

        if domain_filter.is_enabled() {
            log::info!(
                "Domain filtering enabled: {} whitelist entries",
                expanded_domains.len()
            );
        }

        let proxy_ctx = Arc::new(ProxyContext {
            client,
            upstream: upstream_uri.clone(),
            domain_filter,
            tls_only: config.tls.only,
            proxy_protocol_enabled: config.server.proxy_protocol.enabled,
            proxy_protocol_timeout_ms: config.server.proxy_protocol.timeout_ms,
        });

        match tls_mode {
            TlsMode::Custom => {
                let cert_path_str = config.tls.cert_path.as_ref().unwrap().clone();
                let key_path_str = config.tls.key_path.as_ref().unwrap().clone();
                let cert_path = std::path::Path::new(&cert_path_str);
                let key_path = std::path::Path::new(&key_path_str);
                let server_config = load_custom_server_config(cert_path, key_path)?;
                let tls_addrs: Vec<_> = if !config.server.tls_bind.is_empty() {
                    config.server.tls_bind.iter().map(|addr| addr.parse::<SocketAddr>().unwrap()).collect()
                } else {
                    vec![config.server.tls_addr.parse::<SocketAddr>().unwrap()]
                };

                if tls_addrs.len() > 1 { log::info!("Starting {} HTTPS listeners (custom TLS)", tls_addrs.len()); }

                let mut tasks = Vec::new();
                for bind_addr in tls_addrs {
                    let listener = TcpListener::bind(bind_addr)
                        .await
                        .with_context(|| format!("failed to bind TLS socket at {}", bind_addr))?;
                    log::info!("HTTPS proxy listening on https://{}", bind_addr);
                    let shutdown = shutdown_rx.clone();
                    let tls_state_clone = tls_state.clone();
                    let skels_clone = state.skels.clone();
                    let ctx_clone = proxy_ctx.clone();
                    let cfg = server_config.clone();
                    tasks.push(tokio::spawn(async move {
                        if let Err(err) = run_custom_tls_proxy(
                            listener,
                            cfg,
                            ctx_clone,
                            tls_state_clone,
                            skels_clone,
                            shutdown,
                        )
                        .await
                        {
                            log::error!("custom TLS proxy terminated: {err:?}");
                        }
                    }));
                }

                Some(tokio::spawn(async move {
                    for t in tasks {
                        let _ = t.await;
                    }
                }))
            }
            TlsMode::Acme => {
                let http_addrs: Vec<_> = if !config.server.http_bind.is_empty() {
                    config.server.http_bind.iter().map(|addr| addr.parse::<SocketAddr>().unwrap()).collect()
                } else {
                    vec![config.server.http_addr.parse::<SocketAddr>().unwrap()]
                };
                let tls_addrs: Vec<_> = if !config.server.tls_bind.is_empty() {
                    config.server.tls_bind.iter().map(|addr| addr.parse::<SocketAddr>().unwrap()).collect()
                } else {
                    vec![config.server.tls_addr.parse::<SocketAddr>().unwrap()]
                };

                if http_addrs.len() != tls_addrs.len() { log::warn!("ACME mode: number of HTTP bind addresses ({}) does not match HTTPS ({}) - pairing will use min length; extras will be ignored", http_addrs.len(), tls_addrs.len()); }
                let pair_count = http_addrs.len().min(tls_addrs.len());
                if pair_count == 0 { log::warn!("ACME mode: no bind addresses provided; using defaults http={} https={}", config.server.http_addr, config.server.tls_addr); }

                let mut tasks = Vec::new();
                let expanded_domains_clone = expanded_domains.clone();
                let acme_config_clone = config.acme.clone();
                let redis_config_clone = config.redis.clone();
                for i in 0..pair_count.max(1) {
                    let http_addr = http_addrs.get(i).cloned().unwrap_or(config.server.http_addr.parse().unwrap());
                    let https_addr = tls_addrs.get(i).cloned().unwrap_or(config.server.tls_addr.parse().unwrap());

                    let http_listener = TcpListener::bind(http_addr)
                        .await
                        .with_context(|| format!("failed to bind HTTP socket for ACME HTTP-01 at {}", http_addr))?;
                    let https_listener = TcpListener::bind(https_addr)
                        .await
                        .with_context(|| format!("failed to bind HTTPS socket at {}", https_addr))?;

                    log::info!("HTTP server listening on http://{} (ACME HTTP-01 + HTTP)", http_addr);
                    log::info!("HTTPS server (ACME) listening on https://{}", https_addr);

                    let tls_state_clone = tls_state.clone();
                    let shutdown = shutdown_rx.clone();
                    let _args_clone = args.clone();
                    let skels_clone = state.skels.clone();
                    let ctx_clone = proxy_ctx.clone();
                    let expanded_domains_task = expanded_domains_clone.clone();
                    let acme_config_task = acme_config_clone.clone();
                    let redis_config_task = redis_config_clone.clone();
                    tasks.push(tokio::spawn(async move {
                        if let Err(err) = run_acme_http01_proxy(
                            https_listener,
                            http_listener,
                            &acme_config_task,
                            &redis_config_task,
                            expanded_domains_task,
                            ctx_clone,
                            tls_state_clone,
                            skels_clone,
                            shutdown,
                        )
                        .await
                        {
                            log::error!("ACME HTTP-01 proxy terminated: {err:?}");
                        }
                    }));
                }

                Some(tokio::spawn(async move {
                    for t in tasks {
                        let _ = t.await;
                    }
                }))
            }
            TlsMode::Disabled => {
                // HTTP proxy for disabled TLS mode (multiple bind support)
                let http_addrs: Vec<_> = if !args.http_bind.is_empty() {
                    args.http_bind.clone()
                } else {
                    vec![args.http_addr]
                };

                if http_addrs.len() > 1 { log::info!("Starting {} HTTP listeners", http_addrs.len()); }

                let mut tasks = Vec::new();
                for bind_addr in http_addrs {
                    let listener = TcpListener::bind(bind_addr)
                        .await
                        .with_context(|| format!("failed to bind HTTP socket at {}", bind_addr))?;
                    log::info!("HTTP proxy listening on http://{}", bind_addr);
                    let shutdown = shutdown_rx.clone();
                    let skels_clone = state.skels.clone();
                    let ctx_clone = proxy_ctx.clone();
                    tasks.push(tokio::spawn(async move {
                        if let Err(err) = run_http_proxy(
                            listener,
                            ctx_clone,
                            skels_clone,
                            shutdown,
                        )
                        .await
                        {
                            log::error!("HTTP proxy terminated: {err:?}");
                        }
                    }));
                }

                Some(tokio::spawn(async move {
                    for t in tasks {
                        let _ = t.await;
                    }
                }))
            }
        }
    };

    // Start health check server
    let health_check_handle = {
        let shutdown = shutdown_rx.clone();
        let health_config = config.server.health_check.clone();
        tokio::spawn(async move {
            if let Err(err) = start_health_check_server(health_config, shutdown).await {
                log::error!("Health check server error: {}", err);
            }
        })
    };

    signal::ctrl_c().await?;
    log::info!("Shutdown signal received, stopping servers...");
    let _ = shutdown_tx.send(true);

    if let Some(handle) = tls_handle
        && let Err(err) = handle.await
    {
        log::error!("TLS task join error: {err}");
    }

    if let Some(handle) = access_rules_handle
        && let Err(err) = handle.await
    {
        log::error!("access-rules task join error: {err}");
    }

    if let Err(err) = health_check_handle.await {
        log::error!("health-check task join error: {err}");
    }

    // Detach XDP programs from interfaces
    if !ifindices.is_empty() {
        log::info!("Detaching XDP programs from {} interfaces...", ifindices.len());
        for ifindex in ifindices {
            if let Err(e) = bpf_utils::bpf_detach_from_xdp(ifindex) {
                log::error!("Failed to detach XDP from interface {}: {}", ifindex, e);
            }
        }
    }

    Ok(())
}
